require "test_helper"
include GostMagma

BlockSize = Magma::BlockLengthInBytes

# GOST R 34.13-2015 Magma test data
SelfTestGostMMasterKeyData = [
  0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 
  0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0x00,
  0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 
  0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
].pack('C*').freeze

SelfTestGostMPlainText = [
  0x92, 0xde, 0xf0, 0x6b, 0x3c, 0x13, 0x0a, 0x59, 
  0xdb, 0x54, 0xc7, 0x04, 0xf8, 0x18, 0x9d, 0x20,
  0x4a, 0x98, 0xfb, 0x2e, 0x67, 0xa8, 0x02, 0x4c, 
  0x89, 0x12, 0x40, 0x9b, 0x17, 0xb5, 0x7e, 0x41,
].pack('C*').freeze

# ECB
SelfTestGostMEcbEncText = [
  0x2b, 0x07, 0x3f, 0x04, 0x94, 0xf3, 0x72, 0xa0, 
  0xde, 0x70, 0xe7, 0x15, 0xd3, 0x55, 0x6e, 0x48,
  0x11, 0xd8, 0xd9, 0xe9, 0xea, 0xcf, 0xbc, 0x1e, 
  0x7c, 0x68, 0x26, 0x09, 0x96, 0xc6, 0x7e, 0xfb
].pack('C*').freeze

# OMAC
SelfTestGostMMacValue = [
  0x15, 0x4e, 0x72, 0x10, 0x20, 0x30, 0xc5, 0xbb
].pack('C*').freeze

# CTR 
SelfTestGostMCtrSV = [
  0x12, 0x34, 0x56, 0x78
].pack('C*').freeze

SelfTestGostMCtrEncText = [
  0x4e, 0x98, 0x11, 0x0c, 0x97, 0xb7, 0xb9, 0x3c,
  0x3e, 0x25, 0x0d, 0x93, 0xd6, 0xe8, 0x5d, 0x69,
  0x13, 0x6d, 0x86, 0x88, 0x07, 0xb2, 0xdb, 0xef,
  0x56, 0x8e, 0xb6, 0x80, 0xab, 0x52, 0xa1, 0x2d    
].pack('C*').freeze

# OFB
SelfTestGostMOfbSV = [
  0x12, 0x34, 0x56, 0x78, 0x90, 0xab, 0xcd, 0xef, 
  0x23, 0x45, 0x67, 0x89, 0x0a, 0xbc, 0xde, 0xf1
].pack('C*').freeze

SelfTestGostMOfbEncText = [
  0xdb, 0x37, 0xe0, 0xe2, 0x66, 0x90, 0x3c, 0x83,
  0x0d, 0x46, 0x64, 0x4c, 0x1f, 0x9a, 0x08, 0x9c,
  0xa0, 0xf8, 0x30, 0x62, 0x43, 0x0e, 0x32, 0x7e,
  0xc8, 0x24, 0xef, 0xb8, 0xbd, 0x4f, 0xdb, 0x05     
].pack('C*').freeze

# CFB
SelfTestGostMCfbSV = [
  0x12, 0x34, 0x56, 0x78, 0x90, 0xab, 0xcd, 0xef,  
  0x23, 0x45, 0x67, 0x89, 0x0a, 0xbc, 0xde, 0xf1
].pack('C*').freeze

SelfTestGostMCfbEncText = [
  0xdb, 0x37, 0xe0, 0xe2, 0x66, 0x90, 0x3c, 0x83,
  0x0d, 0x46, 0x64, 0x4c, 0x1f, 0x9a, 0x08, 0x9c,
  0x24, 0xbd, 0xd2, 0x03, 0x53, 0x15, 0xd3, 0x8b,
  0xbc, 0xc0, 0x32, 0x14, 0x21, 0x07, 0x55, 0x05
].pack('C*').freeze

# CBC
SelfTestGostMCbcSV = [
  0x12, 0x34, 0x56, 0x78, 0x90, 0xab, 0xcd, 0xef,  
  0x23, 0x45, 0x67, 0x89, 0x0a, 0xbc, 0xde, 0xf1,  
  0x34, 0x56, 0x78, 0x90, 0xab, 0xcd, 0xef, 0x12  
].pack('C*').freeze

SelfTestGostMCbcEncText = [
  0x96, 0xd1, 0xb0, 0x5e, 0xea, 0x68, 0x39, 0x19,
  0xaf, 0xf7, 0x61, 0x29, 0xab, 0xb9, 0x37, 0xb9,
  0x50, 0x58, 0xb4, 0xa1, 0xc4, 0xbc, 0x00, 0x19,
  0x20, 0xb7, 0x8b, 0x1a, 0x7c, 0xd7, 0xe6, 0x67
].pack('C*').freeze

# ACPKM test key
SelfTestGostMAcpkmKeyData = [
  0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF, 
  0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 
  0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10, 
  0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF
].pack('C*').freeze


# CTR-ACPKM
SelfTestGostMCtrAcpkmGamma_s = BlockSize
SelfTestGostMCtrAcpkmSection_N = BlockSize * 2
SelfTestGostMCtrAcpkmIV = [
  0x12, 0x34, 0x56, 0x78
].pack('C*').freeze

SelfTestGostMCtrAcpkmPlainText = [
  0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00, 
  0xFF, 0xEE, 0xDD, 0xCC, 0xBB, 0xAA, 0x99, 0x88, 
  0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 
  0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xEE, 0xFF, 0x0A, 
  0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 
  0x99, 0xAA, 0xBB, 0xCC, 0xEE, 0xFF, 0x0A, 0x00, 
  0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99 
].pack('C*').freeze

SelfTestGostMCtrAcpkmEncText = [
  0x2A, 0xB8, 0x1D, 0xEE, 0xEB, 0x1E, 0x4C, 0xAB, 
  0x68, 0xE1, 0x04, 0xC4, 0xBD, 0x6B, 0x94, 0xEA, 
  0xC7, 0x2C, 0x67, 0xAF, 0x6C, 0x2E, 0x5B, 0x6B, 
  0x0E, 0xAF, 0xB6, 0x17, 0x70, 0xF1, 0xB3, 0x2E, 
  0xA1, 0xAE, 0x71, 0x14, 0x9E, 0xED, 0x13, 0x82, 
  0xAB, 0xD4, 0x67, 0x18, 0x06, 0x72, 0xEC, 0x6F, 
  0x84, 0xA2, 0xF1, 0x5B, 0x3F, 0xCA, 0x72, 0xC1
].pack('C*').freeze

# OMAC-ACPKM
  
SelfTestGostMMacAcpkm_s = BlockSize
SelfTestGostMMacAcpkm_N = BlockSize * 2
SelfTestGostMMacAcpkm_T = SelfTestGostMMacAcpkm_N * 5

SelfTestGostMMacAcpkm_M = [
  0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00, 
  0xFF, 0xEE, 0xDD, 0xCC,
].pack('C*').freeze

SelfTestGostMMacAcpkm_mac_M = [
  0xA0, 0x54, 0x0E, 0x37, 0x30, 0xAC, 0xBC, 0xF3,
].pack('C*').freeze
  
SelfTestGostMMacAcpkm_TC26_M_5 = [
	0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00, 
	0xFF, 0xEE, 0xDD, 0xCC, 0xBB, 0xAA, 0x99, 0x88, 
	0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 
	0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xEE, 0xFF, 0x0A, 
	0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88,
].pack('C*').freeze

SelfTestGostMMacAcpkm_TC26_mac_M_5 = [
	0x34, 0x00, 0x8d, 0xad, 0x54, 0x96, 0xbb, 0x8e
].pack('C*').freeze

class GostMagmaTest < Minitest::Test
  def test_that_it_has_a_version_number
    refute_nil ::GostMagma::VERSION
  end

  def test_ecb_standard
    key = SelfTestGostMMasterKeyData
    plain_text = SelfTestGostMPlainText
    encrypted_test = SelfTestGostMEcbEncText

    encrypted_text = MagmaEcb.new(key).encrypt(plain_text)
    assert encrypted_text == encrypted_test 
    
    decrypted_text = MagmaEcb.new(key).decrypt(encrypted_test)
    assert decrypted_text == plain_text 
  end

  def test_omac_standard
    key = SelfTestGostMMasterKeyData
    plain_text = SelfTestGostMPlainText
    mac_test = SelfTestGostMMacValue

    mac = MagmaOmac.new(key, mac_test.length).update(plain_text).final
    assert mac == mac_test 
  end
  
  def test_ctr_standard
    key = SelfTestGostMMasterKeyData
    iv = SelfTestGostMCtrSV
    plain_text = SelfTestGostMPlainText
    encrypted_test = SelfTestGostMCtrEncText
    text_len = plain_text.length

    encrypted_text = MagmaCtr.new(key, iv, BlockSize).encrypt(plain_text)
    assert encrypted_text == encrypted_test
    
    ctx = MagmaCtr.new(key, iv, BlockSize)
    decrypted_text = ctx.decrypt(encrypted_test[0...text_len/3]) +
      ctx.decrypt(encrypted_test[text_len/3..-1])
    assert decrypted_text == plain_text 
  end

  def test_ofb_standard
    key = SelfTestGostMMasterKeyData
    iv = SelfTestGostMOfbSV
    s = BlockSize
    plain_text = SelfTestGostMPlainText
    encrypted_test = SelfTestGostMOfbEncText
    text_len = plain_text.length
    
    encrypted_text = MagmaOfb.new(key, iv, s).encrypt(plain_text)
    assert encrypted_text == encrypted_test
    
    ctx = MagmaOfb.new(key, iv, s)
    decrypted_text = ctx.decrypt(encrypted_test[0...text_len/3]) +
      ctx.decrypt(encrypted_test[text_len/3..-1])
    assert decrypted_text == plain_text
  end

  def test_cfb_standard
    key = SelfTestGostMMasterKeyData
    iv = SelfTestGostMCfbSV
    s = BlockSize
    plain_text = SelfTestGostMPlainText
    encrypted_test = SelfTestGostMCfbEncText
    text_len = plain_text.length
    
    encrypted_text = MagmaCfb.new(key, iv, s).encrypt(plain_text)
    assert encrypted_text == encrypted_test
    
    ctx = MagmaCfb.new(key, iv, s)
    decrypted_text = ctx.decrypt(encrypted_test[0...text_len/3]) +
      ctx.decrypt(encrypted_test[text_len/3..-1])
    assert decrypted_text == plain_text
  end

  def test_cbc_standard
    key = SelfTestGostMMasterKeyData
    iv = SelfTestGostMCbcSV
    plain_text = SelfTestGostMPlainText
    encrypted_test = SelfTestGostMCbcEncText

    encrypted_text = MagmaCbc.new(key, iv).encrypt(plain_text)
    assert encrypted_text == encrypted_test
    
    decrypted_text = MagmaCbc.new(key, iv).decrypt(encrypted_test)
    assert decrypted_text == plain_text    
  end

  def test_ctr_acpkm
    key = SelfTestGostMAcpkmKeyData
    s = SelfTestGostMCtrAcpkmGamma_s
    n = SelfTestGostMCtrAcpkmSection_N
    iv = SelfTestGostMCtrAcpkmIV
    plain_text = SelfTestGostMCtrAcpkmPlainText
    encrypted_test = SelfTestGostMCtrAcpkmEncText
    text_len = plain_text.length
    
    encrypted_text = MagmaCtrAcpkm.new(key, iv, s, n).encrypt(plain_text)
    assert encrypted_text == encrypted_test
    
    ctx = MagmaCtrAcpkm.new(key, iv, s, n)
    decrypted_text = ctx.decrypt(encrypted_test[0...text_len/3]) +
      ctx.decrypt(encrypted_test[text_len/3..-1])
    assert decrypted_text == plain_text     
  end

  def test_omac_acpkm
    key = SelfTestGostMAcpkmKeyData
    s = SelfTestGostMMacAcpkm_s
    n = SelfTestGostMMacAcpkm_N
    t = SelfTestGostMMacAcpkm_T
    
    plain_text = SelfTestGostMMacAcpkm_M
    mac_test = SelfTestGostMMacAcpkm_mac_M    
    mac = MagmaOmacAcpkm.new(key, n, t, s).update(plain_text).final
    assert mac == mac_test 
    
    plain_text = SelfTestGostMMacAcpkm_TC26_M_5
    text_len = plain_text.length
    mac_test = SelfTestGostMMacAcpkm_TC26_mac_M_5    
    mac = MagmaOmacAcpkm.new(key, n, t, s).update(plain_text[0...text_len/3]).update(plain_text[text_len/3..-1]).final
    assert mac == mac_test 
  end
  
end
